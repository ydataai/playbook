name: master

on:
  push:
    branches: [ master ]

jobs:
  prepare:
    name: Calculate Version and Build Number
    runs-on: ubuntu-20.04

    outputs:
      build_number: ${{ steps.short_sha.outputs.value }}
      new_release: ${{ steps.semantic.outputs.new_release_published }}
      release: ${{ steps.semantic.outputs.new_release_version }}
      release_notes: ${{ steps.semantic.outputs.new_release_notes }}

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        dry_run: true

    - name: Git Short sha
      id: short_sha
      run: echo "::set-output name=value::$(git rev-parse --short HEAD)"


  build:
    if: needs.prepare.outputs.new_release == 'true'

    name: Build
    runs-on: ubuntu-20.04

    needs: prepare

    steps:
    - uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-

    - name: Build for test
      run: make build


  dev-release:
    if: needs.prepare.outputs.new_release == 'true'

    name: Dev Release
    runs-on: ubuntu-20.04

    needs: [ prepare, build ]

    steps:
    - name: Create Pre Release
      uses: actions/create-release@v1
      env:
        BUILD: ${{ needs.prepare.outputs.build_number }}
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        VERSION: ${{ needs.prepare.outputs.release }}
      with:
        tag_name: build/${{ env.VERSION }}/${{ env.BUILD }}
        release_name: ${{ env.VERSION }}.${{ env.BUILD }}
        body: ${{ github.event.head_commit.message }}
        prerelease: true


  draft-release:
    if: needs.prepare.outputs.new_release == 'true'

    name: Draft Release
    runs-on: ubuntu-20.04

    needs: [ prepare, build ]

    steps:
    - name: Delete Previous drafts
      uses: hugo19941994/delete-draft-releases@v0.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

    - name: Create Draft Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ needs.prepare.outputs.release }}
        release_name: ${{ needs.prepare.outputs.release }}
        body: ${{ needs.prepare.outputs.release_notes }}
        draft: true
